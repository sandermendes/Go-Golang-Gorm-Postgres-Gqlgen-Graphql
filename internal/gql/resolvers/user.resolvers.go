package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"com.project001/main/internal/gql/model"
	"com.project001/main/providers/encrypt"
	"com.project001/main/shared/utils"
)

// type userResolver struct{ *Resolver }

// type mutationResolver struct{ *Resolver }

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {

	// Hash submitted password
	passwordHash, err := encrypt.GenHash(input.Password, 14)
	if err != nil {
		return nil, err
	}
	input.Password = passwordHash

	var user model.User
	if err := utils.Copy(&user, &input); err != nil {
		return nil, err
	}

	if err := r.db.Create(&user).First(&user).Scan(&user).Error; err != nil {
		return nil, err
	}

	fmt.Println("input", input)
	fmt.Println("user", user)

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// User is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	fmt.Println("Listing Users")
	var users []*model.User

	err := r.db.Find(&users).Error
	if err != nil {
		return nil, err
	}

	return users, nil
}
