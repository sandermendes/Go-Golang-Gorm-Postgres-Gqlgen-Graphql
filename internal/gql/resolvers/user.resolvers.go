package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"com.vitanexus/main/internal/gql/generated"
	"com.vitanexus/main/internal/gql/model"
)

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver {
	return &userResolver{r}
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Query() generated.QueryResolver {
	return &queryResolver{r}
}

type userResolver struct{ *Resolver }

// type mutationResolver struct{ *Resolver }

// CreateUser is the resolver for the createUser field.
func (r *userResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createTodo"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *userResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

type queryResolver struct{ *Resolver }

// User is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	fmt.Println("Listing Users")
	var users []*model.User

	err := r.db.Find(&users).Error
	if err != nil {
		return nil, err
	}

	return users, nil
}
